// <auto-generated />
using System;
using Blackhole.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blackhole.DataAccess.Migrations
{
    [DbContext(typeof(BlackHoleContext))]
    partial class BlackHoleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlackHole.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttachamentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Obejct")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("AttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.ToTable("tblAttachment");
                });

            modelBuilder.Entity("BlackHole.Domain.Entities.AttachmentType", b =>
                {
                    b.Property<int>("AttachmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachmentTypeId");

                    b.ToTable("tblAttachmentType");
                });

            modelBuilder.Entity("BlackHole.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("AttachmentId")
                        .IsUnique()
                        .HasFilter("[AttachmentId] IS NOT NULL");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("tblMessage");
                });

            modelBuilder.Entity("BlackHole.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("tblUser");
                });

            modelBuilder.Entity("BlackHole.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("BlackHole.Domain.Entities.AttachmentType", "AttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentTypeId");
                });

            modelBuilder.Entity("BlackHole.Domain.Entities.Message", b =>
                {
                    b.HasOne("BlackHole.Domain.Entities.Attachment", "Attachment")
                        .WithOne("Message")
                        .HasForeignKey("BlackHole.Domain.Entities.Message", "AttachmentId");

                    b.HasOne("BlackHole.Domain.Entities.User", "FromUser")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlackHole.Domain.Entities.User", "ToUser")
                        .WithMany("SentMessages")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
